Types [TSV]
0	reserved	Reserved for use where no type needs to be indicated
1	UTF-8	Without any count or NULL terminator
2	UTF-16	Also known as UTF-16BE
3	S/JIS	Deprecated unless it is needed for special Japanese characters
4	UTF-8 sort	Variant storage of a string for sorting only
5	UTF-16 sort	Variant storage of a string for sorting only
13	JPEG	In a JFIF wrapper
14	PNG	In a PNG wrapper
21	BE Signed Integer	A big-endian signed integer in 1,2,3 or 4 bytes. Note: This data type is not supported in Timed metadata media. Use one of the fixed-size signed integer data types (that is, type codes 65, 66, or 67) instead.
22	BE Unsigned Integer	A big-endian unsigned integer in 1,2,3 or 4 bytes; size of value determines integer size. Note: This data type is not supported in Timed metadata media. Use one of the fixed-size unsigned integer data types (that is, type codes 75, 76, or 77) instead.
23	BE Float32	A big-endian 32-bit floating point value (IEEE754)
24	BE Float64	A big-endian 64-bit floating point value (IEEE754)
27	BMP	Windows bitmap format graphics
28	QuickTime Metadata atom	A block of data having the structure of the Metadata atom defined in this specification
65	8-bit Signed Integer	An 8-bit signed integer
66	BE 16-bit Signed Integer	A big-endian 16-bit signed integer
67	BE 32-bit Signed Integer	A big-endian 32-bit signed integer
70	BE PointF32	A block of data representing a two dimensional (2D) point with 32-bit big-endian floating point x and y coordinates. It has the structure: struct { BEFloat32 x; BEFloat32 y; }
71	BE DimensionsF32	A block of data representing 2D dimensions with 32-bit big-endian floating point width and height. It has the structure: struct { BEFloat32 width; BEFloat32 height; }
72	BE RectF32	A block of data representing a 2D rectangle with 32-bit big-endian floating point x and y coordinates and a 32-bit big-endian floating point width and height size. It has the structure: struct { BEFloat32 x; BEFloat32 y; BEFloat32 width; BEFloat32 height;} or the equivalent structure: struct { PointF32 origin; DimensionsF32 size; }
74	BE 64-bit Signed Integer	A big-endian 64-bit signed integer
75	8-bit Unsigned Integer	An 8-bit unsigned integer
76	BE 16-bit Unsigned Integer	A big-endian 16-bit unsigned integer
77	BE 32-bit Unsigned Integer	A big-endian 32-bit unsigned integer
78	BE 64-bit Unsigned Integer	A big-endian 64-bit unsigned integer
79	AffineTransformF64	A block of data representing a 3x3 transformation matrix. It has the structure: struct { BEFloat64 matrix[3][3]; }
